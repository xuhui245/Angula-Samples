{
  "_args": [
    [
      {
        "raw": "awesome-typescript-loader@^2.2.4",
        "scope": null,
        "escapedName": "awesome-typescript-loader",
        "name": "awesome-typescript-loader",
        "rawSpec": "^2.2.4",
        "spec": ">=2.2.4 <3.0.0",
        "type": "range"
      },
      "C:\\Users\\xjiang\\Desktop\\Angular2\\Angular_2"
    ]
  ],
  "_from": "awesome-typescript-loader@>=2.2.4 <3.0.0",
  "_id": "awesome-typescript-loader@2.2.4",
  "_inCache": true,
  "_location": "/awesome-typescript-loader",
  "_nodeVersion": "6.3.1",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/awesome-typescript-loader-2.2.4.tgz_1473241787007_0.41268524737097323"
  },
  "_npmUser": {
    "name": "panferov-s",
    "email": "fnight.m@gmail.com"
  },
  "_npmVersion": "3.10.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "awesome-typescript-loader@^2.2.4",
    "scope": null,
    "escapedName": "awesome-typescript-loader",
    "name": "awesome-typescript-loader",
    "rawSpec": "^2.2.4",
    "spec": ">=2.2.4 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/awesome-typescript-loader/-/awesome-typescript-loader-2.2.4.tgz",
  "_shasum": "4185d60c035c25515f9c2a747fa5f69b2a001e9e",
  "_shrinkwrap": null,
  "_spec": "awesome-typescript-loader@^2.2.4",
  "_where": "C:\\Users\\xjiang\\Desktop\\Angular2\\Angular_2",
  "author": {
    "name": "Stanislav Panferov",
    "email": "fnight.m@gmail.com",
    "url": "http://panferov.me/"
  },
  "bugs": {
    "url": "https://github.com/s-panferov/awesome-typescript-loader/issues"
  },
  "dependencies": {
    "colors": "^1.1.2",
    "enhanced-resolve": "^2.2.2",
    "loader-utils": "^0.2.6",
    "lodash": "^4.13.1",
    "object-assign": "^4.1.0",
    "source-map-support": "^0.4.0"
  },
  "description": "Awesome TS loader for webpack",
  "devDependencies": {
    "babel-cli": "^6.10.1",
    "babel-core": "^6.10.4",
    "babel-preset-es2015": "^6.9.0",
    "bluebird": "^3.4.1",
    "chai": "^3.5.0",
    "git-hooks": "^1.0.2",
    "grunt": "^1.0.1",
    "grunt-bump": "^0.3.1",
    "grunt-cli": "^1.2.0",
    "grunt-contrib-clean": "^1.0.0",
    "grunt-contrib-copy": "^1.0.0",
    "grunt-conventional-changelog": "^6.1.0",
    "grunt-shell": "^1.1.2",
    "load-grunt-tasks": "^3.5.0",
    "loader": "^2.1.1",
    "mkdirp": "^0.5.1",
    "mocha": "^2.3.4",
    "ps-node": "^0.1.1",
    "rimraf": "^2.5.0",
    "sinon": "^1.17.4",
    "standard-version": "^2.4.0",
    "temp": "^0.8.3",
    "tslint": "^3.14.0",
    "typescript": "^2.0.2",
    "webpack": "2.1.0-beta.4"
  },
  "directories": {},
  "dist": {
    "shasum": "4185d60c035c25515f9c2a747fa5f69b2a001e9e",
    "tarball": "https://registry.npmjs.org/awesome-typescript-loader/-/awesome-typescript-loader-2.2.4.tgz"
  },
  "gitHead": "bd5cbb5869f4b4b4dcbcaff3bb7600d419326559",
  "homepage": "https://github.com/s-panferov/awesome-typescript-loader",
  "keywords": [
    "webpack",
    "loader",
    "webpack-loader",
    "typescript"
  ],
  "license": "MIT",
  "main": "dist/entry.js",
  "maintainers": [
    {
      "name": "panferov-s",
      "email": "fnight.m@gmail.com"
    }
  ],
  "name": "awesome-typescript-loader",
  "optionalDependencies": {},
  "readme": "# The best TypeScript loader for Webpack\n\n[![Join the chat at https://gitter.im/s-panferov/awesome-typescript-loader](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/s-panferov/awesome-typescript-loader?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Build Status](https://travis-ci.org/s-panferov/awesome-typescript-loader.svg?branch=master)](https://travis-ci.org/s-panferov/awesome-typescript-loader)\n\n## Installation\n\n```\nnpm install awesome-typescript-loader --save-dev\n```\n\n## Differences between [`ts-loader`](https://github.com/TypeStrong/ts-loader)\n\n`awesome-typescript-loader` loader was created mostly to speed-up compilation in my own projects.\nSome of them are quite big and I wanted to have full control on how my files are compiled. There are three major points:\n\n1) awesome-typescript-loader (atl) uses dependency resolution to build modules dependency graph at early stages.\nThis speeds up build process in some corner cases (minimizes module resolutions, minimizes `createProgram` calls),\nbut adds a lot of additional complexity. Also it can re-emit all related files which is also useful in some corner cases.\n\n2) atl has first-class integration with Babel and enables caching possibilities. This can be useful for those who use Typescript with Babel.\nWhen `useBabel` and `useCache` flags are enabled, typescript's emit will be transpiled with Babel and cached.\nSo next time if source file (+environment) has the same checksum we can totally skip typescript's and babel's transpiling.\nThis significantly reduces build time in this scenario.\n\n3) atl is able to fork type-checker to a separate process, which also speeds-up some development scenarios (e.g. react with react-hot-loader)\nSo your webpack compilation will end earlier and you can explore compiled version in your browser while your files are typecheked.\n\n## Configuration\n\n1. Add `.ts` as a resolvable extension.\n2. Configure all files with a `.ts` extension to be handled by `awesome-typescript-loader`.\n\n**webpack.config.js**\n\n```javascript\nmodule.exports = {\n\n  // Currently we need to add '.ts' to the resolve.extensions array.\n  resolve: {\n    extensions: ['', '.ts', '.tsx', '.js', '.jsx']\n  },\n\n  // Source maps support ('inline-source-map' also works)\n  devtool: 'source-map',\n\n  // Add the loader for .ts files.\n  module: {\n    loaders: [\n      {\n        test: /\\.ts$/,\n        loader: 'awesome-typescript-loader'\n      }\n    ]\n  }\n};\n```\n\nAfter that, you will be able to build TypeScript files with webpack.\n\n## tsconfig.json\n\nYou can use the tsconfig.json file to configure your compiler and loader:\n\n```\n{\n    \"compilerOptions\": {\n        \"noImplicitAny\": true,\n        \"removeComments\": true\n    },\n    \"awesomeTypescriptLoaderOptions\": {\n        /* ... */\n    }\n}\n```\n\n## Supported TypeScript\n\n`awesome-typescript-loader@2.x` aims to support only `typescript@2.x` and `webpack@2x`, if you need old compilers please use\n`1.x` or `0.x` versions.\n\n## Advanced path resolution in TypeScript 2.0\n\nIf you want to use new `paths` and `baseUrl` feature of TS 2.0 please include `TsConfigPathsPlugin`.\nThis feature is available only for `webpack@2.1`.\n\n```\nvar TsConfigPathsPlugin = require('awesome-typescript-loader').TsConfigPathsPlugin;\n\nresolve: {\n    plugins: [\n        new TsConfigPathsPlugin(/* { tsconfig, compiler } */)\n    ]\n}\n```\n\n## Loader options\n\n### compiler *(string) (default='typescript')*\n\nAllows use of TypeScript compilers other than the official one. Must be\nset to the NPM name of the compiler, e.g. *ntypescript* or the path to a package folder.\nNote that the compiler must be installed in **your** project. You can also use\nnightly versions.\n\n### disableFastEmit (boolean) (default=false)*\n\nDisable fast `transpileModule` emit mode. Disables automatically when you set `declaration: true`.\n\n### emitRequireType *(boolean) (default=false)*\n\nSpecify whether or not the loader emits webpacks's require type.\n\n### instanceName *(string) (default='default')*\n\nAllows the use of several TypeScript compilers with different settings in one app. Override `instanceName` to initialize another instance.\n\n### reEmitDependentFiles *(boolean) (default=false')*\n\nCollect file dependency graph and re-emit all dependent files along with the changed file.\n\n### tsconfig *(string) (default='tsconfig.json')*\n\nSpecifies the path to a TS config file. This is useful when you have multiple config files. This setting is useless *inside* a TS config file.\n\n### doTypeCheck *(boolean) (default=true)*\n\nUse this setting to disable type checking.\n\n### ignoreDiagnostics *(number[]) (default=[])*\n\nYou can squelch certain TypeScript errors by specifying an array of [diagnostic codes](https://github.com/Microsoft/TypeScript/blob/master/src/compiler/diagnosticMessages.json) to ignore.\nFor example, you can transpile [stage 1 properties](https://github.com/jeffmo/es-class-fields-and-static-properties) from `*.js` using `\"ignoreDiagnostics\": [8014]`.\n\n### forkChecker *(boolean) (default=false)*\n\nDo type checking in a separate process, so webpack doesn't need to wait. **Significantly** improves development workflow with tools like [react-hot-loader](https://github.com/gaearon/react-hot-loader).\n\nWorks only with `ForkCheckerPlugin`:\n\n```js\nvar ForkCheckerPlugin = require('awesome-typescript-loader').ForkCheckerPlugin;\n\nplugins: [\n    new ForkCheckerPlugin(),\n]\n```\n\n### forkCheckerSilent *(boolean) (default=false)*\n\nLess logging from the checker.\n\n### useBabel *(boolean) (default=false)*\n\nInvoke Babel to transpile files. Useful with ES6 target. Please see `useCache` option\nwhich can improve warm-up time.\n\n### babelCore *(string) (default=undefined)*\n\nOverride the path used to find `babel-core`. Useful if `node_modules` is installed in a non-standard place or webpack is being invoked from a directory not at the root of the project.\n\n### babelOptions *(object) (default=null)*\n\nUse this option to pass some options to Babel (e.g. presets). Please note that\n[`.babelrc` file](https://babeljs.io/docs/usage/babelrc/) is more universal way to do this.\n\n### useCache *(boolean) (default=false)*\n\nUse internal file cache. This is useful with Babel, when processing takes a long time to complete. Improves warm-up time.\n\n### usePrecompiledFiles *(boolean) (default=false)*\n\nUse pre-compiled files if any. Files must be named as `{filename}.js` and `{filename}.map`.\n\n### cacheDirectory *(string) (default='.awcache')*\n\nDirectory when cache is stored.\n\n### skipDeclarationFilesCheck *(string) (default=false)*\n\nSkip declaration files typechecking. Use this only if you understand consequences.\n\n## Compiler options\n\nYou can pass compiler options inside loader query string or in tsconfig file.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/s-panferov/awesome-typescript-loader.git"
  },
  "scripts": {
    "build": "npm run build:ts && npm run build:tests && npm run build:babel",
    "build:babel": "babel dist --out-dir dist.babel",
    "build:tests": "cd src/test && tsc --pretty",
    "build:ts": "tsc -p src --pretty",
    "lint": "tslint src/*.ts",
    "prebuild": "npm run lint",
    "prepublish": "npm run build",
    "release": "standard-version",
    "test": "mocha dist.babel/test",
    "watch": "npm run watch:ts",
    "watch:babel": "babel dist --watch --out-dir dist.babel",
    "watch:ts": "npm run build:ts -- --watch --diagnostics"
  },
  "version": "2.2.4"
}
